#! /bin/bash

ABSPATH="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/$(basename "${BASH_SOURCE[0]}")"
ROOT_DIR=$(echo "$ABSPATH" | tr '/' '\n' | xargs -E bin | tr ' ' '/' | awk '{print "/" $0}')

# shellcheck disable=SC1090
for u in $ROOT_DIR/utils/*.sh; do source "$u"; done
for p in $ROOT_DIR/packages/*.sh; do source "$p"; done

get_package_info

usage(){
cat <<EOF
USAGE: sst [OPTIONS]
    Marcus' system setup tool - installs and configures software and working environment on unix-based systems.

    List of available packages for installation:
EOF
printf '        - %-20s %s\n' "${PKG_INFO[@]}"
cat <<EOF

    Tested on :
        - Ubuntu 18.04
        - macOS Mojave

    After the installation, remember to:
        - Use 'prefix + I' when first starting tmux to install plugins.
    If you installed fusuma:
        1. Check fusuma installation path using 'which fusuma'.
        2. Press alt + F2, enter 'gnome-session-properties'.
        3. Add fusuma using the -d option.

OPTIONS:
    -d|--defaults           Install os-specific default packages.
       --fusuma             Install fusuma package.
       --docker             Install or uninstall and reinstall docker.
       --nvidia_drivers     Install or uninstall and reinstall nvidia drivers.
       --nvidia_cuda        Install or uninstall and reinstall nvidia cuda.
       --nvidia_docker      Install nvidia-docker package.
       --nvtop              Install nvtop package.
       --dropbox            Install dropbox package.

       --uninstall_nvidia   Uninstalls all nvidia software. If specified, the script will exit afterwards.
       --uninstall_docker   Uninstalls docker. If specified, the script will exit afterwards.
EOF
}

uninstall_nvidia_all(){
  if [ ! "$OS" = "linux" ]; then
    echo_red "uninstalling nvidia software is currently only implemented for linux" && return 1
  fi

  read -p "Do you really want to uninstall all nvidia software [y/n]? " -n 1 -r
  echo
  if [ ! "$REPLY" = Y ] && [ ! "$REPLY" = y ]; then
    echo_red "Exiting." && exit 1
  else
    sudo apt-get -y purge '^nvidia-.*'
    sudo apt-get -y purge '^libnvidia-.*'
    sudo apt-get -y autoremove
  fi
}

uninstall_docker(){
  if [ ! "$OS" = "linux" ]; then
    echo_red "uninstalling docker is currently only implemented for linux" && return 1
  fi

  read -p "Do you really want to uninstall docker [y/n]? " -n 1 -r
  echo
  if [ ! "$REPLY" = Y ] && [ ! "$REPLY" = y ]; then
    echo_red "Exiting." && exit 1
  else
    sudo apt-get -y purge '^docker-.*'
    sudo apt-get -y purge containerd runc
    sudo apt-get -y autoremove
  fi
}

configure_vim(){
  tic -o ~/.terminfo $ROOT_DIR/config/xterm-256color.terminfo
  export TERM=xterm-256color

  # Install Vundle
  git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
}


main(){
  if [ -z "$PACKAGES_TO_INSTALL" ]; then
    usage
    exit 0
  fi

  check_which_os
  for PACKAGE in $PACKAGES_TO_INSTALL; do
    install_"$PACKAGE"
  done
}

unset OS
unset PACKAGES_TO_INSTALL
while [[ $# -gt 0 ]]; do

  case $1 in
    -h|--help)
    usage
    exit 0 ;;

    -l|--linux)
    OS="linux"
    shift 1 ;;

    -m|--mac)
    OS="mac"
    shift 1 ;;

    -d|--defaults)
    PACKAGES_TO_INSTALL="${PACKAGES_TO_INSTALL} defaults"
    shift 1 ;;

    --fusuma)
    PACKAGES_TO_INSTALL="${PACKAGES_TO_INSTALL} fusuma"
    shift 1 ;;

    --docker)
    PACKAGES_TO_INSTALL="${PACKAGES_TO_INSTALL} docker"
    shift 1 ;;

    --nvidia_drivers)
    PACKAGES_TO_INSTALL="${PACKAGES_TO_INSTALL} nvidia_drivers"
    shift 1 ;;

    --nvidia_cuda)
    PACKAGES_TO_INSTALL="${PACKAGES_TO_INSTALL} nvidia_cuda"
    shift 1 ;;

    --nvidia_docker)
    PACKAGES_TO_INSTALL="${PACKAGES_TO_INSTALL} nvidia_docker"
    shift 1 ;;

    --nvtop)
    PACKAGES_TO_INSTALL="${PACKAGES_TO_INSTALL} nvtop"
    shift 1 ;;

    --dropbox)
    PACKAGES_TO_INSTALL="${PACKAGES_TO_INSTALL} dropbox cryfs"
    shift 1 ;;

    --uninstall_nvidia)
    uninstall_nvidia_all
    exit 0 ;;

    --uninstall_docker)
    uninstall_docker
    exit 0 ;;

    *)
    echo_red "Unknown option: $1";
    usage
    exit 1 ;;
  esac

done
main
